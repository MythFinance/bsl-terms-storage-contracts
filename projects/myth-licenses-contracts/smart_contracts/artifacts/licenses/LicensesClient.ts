/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"Licenses","structs":{},"methods":[{"name":"add_product","args":[{"type":"string","name":"name"},{"type":"uint64","name":"change_date"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"modify_use_grants","args":[{"type":"string","name":"name"},{"type":"uint64","name":"offset"},{"type":"string","name":"payload"},{"type":"bool","name":"final_chunk"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"modify_change_date","args":[{"type":"string","name":"name"},{"type":"uint64","name":"next_change_date"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"modify_global","args":[{"type":"byte[]","name":"key"},{"type":"byte[]","name":"value"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"modify_admin","args":[{"type":"account","name":"new_admin"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":54,"bytes":10},"local":{"ints":0,"bytes":0}},"keys":{"global":{"admin":{"keyType":"AVMString","valueType":"address","key":"YWRtaW4="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"licenses":{"keyType":"AVMString","valueType":"AVMString","prefix":""}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[434,452,476,498,531],"errorMessage":"OnCompletion is not NoOp"},{"pc":[558],"errorMessage":"can only call when creating"},{"pc":[437,455,479,501,534],"errorMessage":"can only call when not creating"},{"pc":[817],"errorMessage":"check self.admin exists"},{"pc":[644,670],"errorMessage":"check self.licenses entry exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiACAQAmBQEiBWFkbWluFyIgYWRkaXRpb25hbCB1c2UgZ3JhbnRzDSIgY2hhbmdlIGRhdGUKRVJSOk5FWElTVDEYQAE5KTEAZ4ICCSBSRUFETUUgMWJDb250cmFjdCBob2xkaW5nIGFkZGl0aW9uYWwgdXNlIGdyYW50cyBhbmQgY2hhbmdlIGRhdGVzIGZvciBCU0wgbGljZW5zZWQgcHJvZHVjdHMgYnkgTXl0aCBGaW5hbmNlLmeCAgkgUkVBRE1FIDJWU3RvcmFnZSBrZXlzIGFyZSBwcmVmaXhlZCB3aXRoIHRoZSBwcm9kdWN0IG5hbWUuIFVzZSBncmFudHMgYXJlIHN0b3JlZCBpbiBib3ggc3RvcmFnZS5nggIJIFJFQURNRSAzU0NoYW5nZSBkYXRlcyBhcmUgc3RvcmVkIGluIGdsb2JhbCBzdG9yYWdlIGFzIHNlY29uZHMgc2luY2UgMTk3MC0wMS0wMSAwMDowMDowMCBVVEMuZzEbQQCjggUEiLyaewQWLj55BFHa2i0EQRUdqAS7o9qLNhoAjgUAYwBCACwAFAACI0MxGRREMRhENhoBF8AciAFiIkMxGRREMRhENhoBVwIANhoCVwIAiAEQIkMxGRREMRhENhoBVwIANhoCF4gAviJDMRkURDEYRDYaAVcCADYaAhc2GgNXAgA2GgQjU4gAVCJDMRkURDEYRDYaAVcCADYaAheIAA0iQzEZQP+CMRgURCJDigIAiAD1KIv+UEkqUEm9RQFBAA2ACUVSUjpFWElTVLAAiwArUIv/Z4sBSbxIgAC/iYoEAIAAKIv8UCpQSb1FAUAABCcEsACL/hWL/QhJjACLAb1EDUEABYsBiwDTiwGL/SOL/tKL/0EAD4sBvUSLAA1BAAWLAYsA04mKAgAjiAB6KIv+UEkqUL1FAUAABCcEsACLAStQSYwAZEkWsIv/DUAADYAJRVJSOkxBVEVSsACLAIv/Z4mKAgCIAD+L/hUjSwEPI0sCTwJNIksCDyJPA08CTYv+TgJSKBNAAA2ACUVSUjpJTlZMRLAAi/6L/2eJigEAiAAFKYv/Z4kxACMpZUQSQAAOgApFUlI6VU5BVVRIsACJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Licenses contract
 */
export type LicensesArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'add_product(string,uint64)void': {
      name: string
      changeDate: bigint | number
    }
    'modify_use_grants(string,uint64,string,bool)void': {
      name: string
      offset: bigint | number
      payload: string
      finalChunk: boolean
    }
    'modify_change_date(string,uint64)void': {
      name: string
      nextChangeDate: bigint | number
    }
    'modify_global(byte[],byte[])void': {
      key: Uint8Array
      value: Uint8Array
    }
    'modify_admin(account)void': {
      newAdmin: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'add_product(string,uint64)void': [name: string, changeDate: bigint | number]
    'modify_use_grants(string,uint64,string,bool)void': [name: string, offset: bigint | number, payload: string, finalChunk: boolean]
    'modify_change_date(string,uint64)void': [name: string, nextChangeDate: bigint | number]
    'modify_global(byte[],byte[])void': [key: Uint8Array, value: Uint8Array]
    'modify_admin(account)void': [newAdmin: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type LicensesReturns = {
  'add_product(string,uint64)void': void
  'modify_use_grants(string,uint64,string,bool)void': void
  'modify_change_date(string,uint64)void': void
  'modify_global(byte[],byte[])void': void
  'modify_admin(account)void': void
}

/**
 * Defines the types of available calls and state of the Licenses smart contract.
 */
export type LicensesTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'add_product(string,uint64)void' | 'add_product', {
      argsObj: LicensesArgs['obj']['add_product(string,uint64)void']
      argsTuple: LicensesArgs['tuple']['add_product(string,uint64)void']
      returns: LicensesReturns['add_product(string,uint64)void']
    }>
    & Record<'modify_use_grants(string,uint64,string,bool)void' | 'modify_use_grants', {
      argsObj: LicensesArgs['obj']['modify_use_grants(string,uint64,string,bool)void']
      argsTuple: LicensesArgs['tuple']['modify_use_grants(string,uint64,string,bool)void']
      returns: LicensesReturns['modify_use_grants(string,uint64,string,bool)void']
    }>
    & Record<'modify_change_date(string,uint64)void' | 'modify_change_date', {
      argsObj: LicensesArgs['obj']['modify_change_date(string,uint64)void']
      argsTuple: LicensesArgs['tuple']['modify_change_date(string,uint64)void']
      returns: LicensesReturns['modify_change_date(string,uint64)void']
    }>
    & Record<'modify_global(byte[],byte[])void' | 'modify_global', {
      argsObj: LicensesArgs['obj']['modify_global(byte[],byte[])void']
      argsTuple: LicensesArgs['tuple']['modify_global(byte[],byte[])void']
      returns: LicensesReturns['modify_global(byte[],byte[])void']
    }>
    & Record<'modify_admin(account)void' | 'modify_admin', {
      argsObj: LicensesArgs['obj']['modify_admin(account)void']
      argsTuple: LicensesArgs['tuple']['modify_admin(account)void']
      returns: LicensesReturns['modify_admin(account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        admin: string
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        licenses: Map<string, string>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LicensesSignatures = keyof LicensesTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LicensesNonVoidMethodSignatures = keyof LicensesTypes['methods'] extends infer T ? T extends keyof LicensesTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Licenses smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LicensesSignatures> = LicensesTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Licenses smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LicensesSignatures> = LicensesTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = LicensesTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = LicensesTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LicensesCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LicensesDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LicensesCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Licenses smart contract
 */
export abstract class LicensesParamsFactory {
  /**
   * Constructs a no op call for the add_product(string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addProduct(params: CallParams<LicensesArgs['obj']['add_product(string,uint64)void'] | LicensesArgs['tuple']['add_product(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'add_product(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.changeDate],
    }
  }
  /**
   * Constructs a no op call for the modify_use_grants(string,uint64,string,bool)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static modifyUseGrants(params: CallParams<LicensesArgs['obj']['modify_use_grants(string,uint64,string,bool)void'] | LicensesArgs['tuple']['modify_use_grants(string,uint64,string,bool)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'modify_use_grants(string,uint64,string,bool)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.offset, params.args.payload, params.args.finalChunk],
    }
  }
  /**
   * Constructs a no op call for the modify_change_date(string,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static modifyChangeDate(params: CallParams<LicensesArgs['obj']['modify_change_date(string,uint64)void'] | LicensesArgs['tuple']['modify_change_date(string,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'modify_change_date(string,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.name, params.args.nextChangeDate],
    }
  }
  /**
   * Constructs a no op call for the modify_global(byte[],byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static modifyGlobal(params: CallParams<LicensesArgs['obj']['modify_global(byte[],byte[])void'] | LicensesArgs['tuple']['modify_global(byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'modify_global(byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.key, params.args.value],
    }
  }
  /**
   * Constructs a no op call for the modify_admin(account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static modifyAdmin(params: CallParams<LicensesArgs['obj']['modify_admin(account)void'] | LicensesArgs['tuple']['modify_admin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'modify_admin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdmin],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Licenses smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LicensesFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LicensesFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LicensesClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LicensesClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Licenses smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LicensesDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new LicensesClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Licenses smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Licenses smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Licenses smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LicensesClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Licenses smart contract
 */
export class LicensesClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LicensesClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Licenses app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LicensesClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LicensesNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LicensesClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LicensesClient> {
    return new LicensesClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LicensesClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LicensesClient> {
    return new LicensesClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Licenses smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Licenses smart contract using the `add_product(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addProduct: (params: CallParams<LicensesArgs['obj']['add_product(string,uint64)void'] | LicensesArgs['tuple']['add_product(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LicensesParamsFactory.addProduct(params))
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_use_grants(string,uint64,string,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    modifyUseGrants: (params: CallParams<LicensesArgs['obj']['modify_use_grants(string,uint64,string,bool)void'] | LicensesArgs['tuple']['modify_use_grants(string,uint64,string,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LicensesParamsFactory.modifyUseGrants(params))
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_change_date(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    modifyChangeDate: (params: CallParams<LicensesArgs['obj']['modify_change_date(string,uint64)void'] | LicensesArgs['tuple']['modify_change_date(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LicensesParamsFactory.modifyChangeDate(params))
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_global(byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    modifyGlobal: (params: CallParams<LicensesArgs['obj']['modify_global(byte[],byte[])void'] | LicensesArgs['tuple']['modify_global(byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LicensesParamsFactory.modifyGlobal(params))
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    modifyAdmin: (params: CallParams<LicensesArgs['obj']['modify_admin(account)void'] | LicensesArgs['tuple']['modify_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LicensesParamsFactory.modifyAdmin(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Licenses smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Licenses smart contract using the `add_product(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addProduct: (params: CallParams<LicensesArgs['obj']['add_product(string,uint64)void'] | LicensesArgs['tuple']['add_product(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LicensesParamsFactory.addProduct(params))
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_use_grants(string,uint64,string,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    modifyUseGrants: (params: CallParams<LicensesArgs['obj']['modify_use_grants(string,uint64,string,bool)void'] | LicensesArgs['tuple']['modify_use_grants(string,uint64,string,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LicensesParamsFactory.modifyUseGrants(params))
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_change_date(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    modifyChangeDate: (params: CallParams<LicensesArgs['obj']['modify_change_date(string,uint64)void'] | LicensesArgs['tuple']['modify_change_date(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LicensesParamsFactory.modifyChangeDate(params))
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_global(byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    modifyGlobal: (params: CallParams<LicensesArgs['obj']['modify_global(byte[],byte[])void'] | LicensesArgs['tuple']['modify_global(byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LicensesParamsFactory.modifyGlobal(params))
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    modifyAdmin: (params: CallParams<LicensesArgs['obj']['modify_admin(account)void'] | LicensesArgs['tuple']['modify_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LicensesParamsFactory.modifyAdmin(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Licenses smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Licenses smart contract using the `add_product(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addProduct: async (params: CallParams<LicensesArgs['obj']['add_product(string,uint64)void'] | LicensesArgs['tuple']['add_product(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LicensesParamsFactory.addProduct(params))
      return {...result, return: result.return as unknown as (undefined | LicensesReturns['add_product(string,uint64)void'])}
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_use_grants(string,uint64,string,bool)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    modifyUseGrants: async (params: CallParams<LicensesArgs['obj']['modify_use_grants(string,uint64,string,bool)void'] | LicensesArgs['tuple']['modify_use_grants(string,uint64,string,bool)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LicensesParamsFactory.modifyUseGrants(params))
      return {...result, return: result.return as unknown as (undefined | LicensesReturns['modify_use_grants(string,uint64,string,bool)void'])}
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_change_date(string,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    modifyChangeDate: async (params: CallParams<LicensesArgs['obj']['modify_change_date(string,uint64)void'] | LicensesArgs['tuple']['modify_change_date(string,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LicensesParamsFactory.modifyChangeDate(params))
      return {...result, return: result.return as unknown as (undefined | LicensesReturns['modify_change_date(string,uint64)void'])}
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_global(byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    modifyGlobal: async (params: CallParams<LicensesArgs['obj']['modify_global(byte[],byte[])void'] | LicensesArgs['tuple']['modify_global(byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LicensesParamsFactory.modifyGlobal(params))
      return {...result, return: result.return as unknown as (undefined | LicensesReturns['modify_global(byte[],byte[])void'])}
    },

    /**
     * Makes a call to the Licenses smart contract using the `modify_admin(account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    modifyAdmin: async (params: CallParams<LicensesArgs['obj']['modify_admin(account)void'] | LicensesArgs['tuple']['modify_admin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LicensesParamsFactory.modifyAdmin(params))
      return {...result, return: result.return as unknown as (undefined | LicensesReturns['modify_admin(account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LicensesClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Licenses app
   */
  state = {
    /**
     * Methods to access global state for the current Licenses app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          admin: result.admin,
        }
      },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("admin")) as string | undefined },
    },
    /**
     * Methods to access box state for the current Licenses app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the licenses map in box state
       */
      licenses: {
        /**
         * Get all current values of the licenses map in box state
         */
        getMap: async (): Promise<Map<string, string>> => { return (await this.appClient.state.box.getMap("licenses")) as Map<string, string> },
        /**
         * Get a current value of the licenses map by key from box state
         */
        value: async (key: string): Promise<string | undefined> => { return await this.appClient.state.box.getMapValue("licenses", key) as string | undefined },
      },
    },
  }

  public newGroup(): LicensesComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a add_product(string,uint64)void method call against the Licenses contract
       */
      addProduct(params: CallParams<LicensesArgs['obj']['add_product(string,uint64)void'] | LicensesArgs['tuple']['add_product(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addProduct(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a modify_use_grants(string,uint64,string,bool)void method call against the Licenses contract
       */
      modifyUseGrants(params: CallParams<LicensesArgs['obj']['modify_use_grants(string,uint64,string,bool)void'] | LicensesArgs['tuple']['modify_use_grants(string,uint64,string,bool)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.modifyUseGrants(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a modify_change_date(string,uint64)void method call against the Licenses contract
       */
      modifyChangeDate(params: CallParams<LicensesArgs['obj']['modify_change_date(string,uint64)void'] | LicensesArgs['tuple']['modify_change_date(string,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.modifyChangeDate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a modify_global(byte[],byte[])void method call against the Licenses contract
       */
      modifyGlobal(params: CallParams<LicensesArgs['obj']['modify_global(byte[],byte[])void'] | LicensesArgs['tuple']['modify_global(byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.modifyGlobal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a modify_admin(account)void method call against the Licenses contract
       */
      modifyAdmin(params: CallParams<LicensesArgs['obj']['modify_admin(account)void'] | LicensesArgs['tuple']['modify_admin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.modifyAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Licenses contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LicensesComposer
  }
}
export type LicensesComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the add_product(string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addProduct(params?: CallParams<LicensesArgs['obj']['add_product(string,uint64)void'] | LicensesArgs['tuple']['add_product(string,uint64)void']>): LicensesComposer<[...TReturns, LicensesReturns['add_product(string,uint64)void'] | undefined]>

  /**
   * Calls the modify_use_grants(string,uint64,string,bool)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  modifyUseGrants(params?: CallParams<LicensesArgs['obj']['modify_use_grants(string,uint64,string,bool)void'] | LicensesArgs['tuple']['modify_use_grants(string,uint64,string,bool)void']>): LicensesComposer<[...TReturns, LicensesReturns['modify_use_grants(string,uint64,string,bool)void'] | undefined]>

  /**
   * Calls the modify_change_date(string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  modifyChangeDate(params?: CallParams<LicensesArgs['obj']['modify_change_date(string,uint64)void'] | LicensesArgs['tuple']['modify_change_date(string,uint64)void']>): LicensesComposer<[...TReturns, LicensesReturns['modify_change_date(string,uint64)void'] | undefined]>

  /**
   * Calls the modify_global(byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  modifyGlobal(params?: CallParams<LicensesArgs['obj']['modify_global(byte[],byte[])void'] | LicensesArgs['tuple']['modify_global(byte[],byte[])void']>): LicensesComposer<[...TReturns, LicensesReturns['modify_global(byte[],byte[])void'] | undefined]>

  /**
   * Calls the modify_admin(account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  modifyAdmin(params?: CallParams<LicensesArgs['obj']['modify_admin(account)void'] | LicensesArgs['tuple']['modify_admin(account)void']>): LicensesComposer<[...TReturns, LicensesReturns['modify_admin(account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Licenses smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LicensesComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LicensesComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LicensesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LicensesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LicensesComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LicensesComposerResults<TReturns>>
}
export type LicensesComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

